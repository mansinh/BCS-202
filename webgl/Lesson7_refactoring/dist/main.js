(()=>{"use strict";var t="undefined"!=typeof Float32Array?Float32Array:Array;function e(){var e=new t(16);return t!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0),e[0]=1,e[5]=1,e[10]=1,e[15]=1,e}Math.random,Math.PI,Math.hypot||(Math.hypot=function(){for(var t=0,e=arguments.length;e--;)t+=arguments[e]*arguments[e];return Math.sqrt(t)});var r=document.getElementById("canvas"),o=r.getContext("webgl2"),i=new f,n={canvas:r,gl:o,webGLApp:i};i.initialize();var a,s=function(){function t(){this.projectionMatrix=e(),this.near=1,this.far=200,this.fovRadians=60*Math.PI/180,this.update()}return t.prototype.update=function(){n.canvas.width==n.canvas.clientWidth&&n.canvas.height==n.canvas.clientHeight||this.updateViewport(),this.updateProjectionMatrix()},t.prototype.updateProjectionMatrix=function(){var t=n.canvas.clientWidth/n.canvas.clientHeight;!function(t,e,r,o,i){var n,a=1/Math.tan(e/2);t[0]=a/r,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=a,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=i&&i!==1/0?(n=1/(o-i),t[10]=(i+o)*n,t[14]=2*i*o*n):(t[10]=-1,t[14]=-2*o)}(this.projectionMatrix,this.fovRadians,t,this.near,this.far),n.gl.uniformMatrix4fv(n.webGLApp.shader.propertyLocationProjectionMatrix,!1,this.projectionMatrix)},t.prototype.updateViewport=function(){n.canvas.width=n.canvas.clientWidth,n.canvas.height=n.canvas.clientHeight,n.gl.viewport(0,0,n.canvas.clientWidth,n.canvas.clientHeight)},t}(),l=function(){function t(){this.vertices=[-1,-.5,-1,1,0,0,1,0,0,1,-.5,-1,0,1,0,1,1,0,0,1,0,0,0,1,1,.5,1,-1,-.5,1,0,1,0,1,0,0,1,-.5,1,1,0,0,1,1,0,0,1,0,0,0,1,1,.5,1,-1,-.5,-1,1,0,0,1,0,0,-1,-.5,1,0,1,0,1,1,0,0,1,0,0,0,1,1,.5,1,1,-.5,1,1,0,0,1,0,0,1,-.5,-1,0,1,0,1,1,0,0,1,0,0,0,1,1,.5,1,-1,-.5,-1,1,0,0,1,0,0,-1,-.5,1,0,1,0,1,0,1,1,-.5,1,1,0,0,1,1,1,-1,-.5,-1,1,0,0,1,0,0,1,-.5,1,1,0,0,1,1,1,1,-.5,-1,0,1,0,1,1,0],this.vertexDataBuffer=n.gl.createBuffer(),this.createVertices(),this.setShaderProperties()}return t.prototype.createVertices=function(){n.gl.bindBuffer(n.gl.ARRAY_BUFFER,this.vertexDataBuffer),n.gl.bufferData(n.gl.ARRAY_BUFFER,new Float32Array(this.vertices),n.gl.STATIC_DRAW)},t.prototype.setShaderProperties=function(){var t=n.webGLApp.shader;n.gl.useProgram(t.program),n.gl.vertexAttribPointer(t.propertyLocationPosition,3,n.gl.FLOAT,!1,36,0),n.gl.vertexAttribPointer(t.propertyLocationColor,4,n.gl.FLOAT,!1,36,12),n.gl.vertexAttribPointer(t.propertyLocationTexCoord,2,n.gl.FLOAT,!1,36,28),n.gl.vertexAttrib1f(t.propertyLocationPointSize,50)},t}(),c=function(){function t(t,r,o){this.position={x:0,y:0,z:0},this.rotation={x:0,y:0,z:0},this.scale={x:1,y:1,z:1},this.position=t,this.scale=o,this.rotation=r,this.modelMatrix=e()}return t.prototype.applyTransforms=function(){var t,e,r,o,i,a,s,l,c,h,p,u,g,f,d,x,y,m;(function(t){t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1})(this.modelMatrix),t=this.modelMatrix,e=this.modelMatrix,x=(r=[this.position.x,this.position.y,this.position.z])[0],y=r[1],m=r[2],e===t?(t[12]=e[0]*x+e[4]*y+e[8]*m+e[12],t[13]=e[1]*x+e[5]*y+e[9]*m+e[13],t[14]=e[2]*x+e[6]*y+e[10]*m+e[14],t[15]=e[3]*x+e[7]*y+e[11]*m+e[15]):(o=e[0],i=e[1],a=e[2],s=e[3],l=e[4],c=e[5],h=e[6],p=e[7],u=e[8],g=e[9],f=e[10],d=e[11],t[0]=o,t[1]=i,t[2]=a,t[3]=s,t[4]=l,t[5]=c,t[6]=h,t[7]=p,t[8]=u,t[9]=g,t[10]=f,t[11]=d,t[12]=o*x+l*y+u*m+e[12],t[13]=i*x+c*y+g*m+e[13],t[14]=a*x+h*y+f*m+e[14],t[15]=s*x+p*y+d*m+e[15]),function(t,e,r){var o=Math.sin(r),i=Math.cos(r),n=e[0],a=e[1],s=e[2],l=e[3],c=e[4],h=e[5],p=e[6],u=e[7];e!==t&&(t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=n*i+c*o,t[1]=a*i+h*o,t[2]=s*i+p*o,t[3]=l*i+u*o,t[4]=c*i-n*o,t[5]=h*i-a*o,t[6]=p*i-s*o,t[7]=u*i-l*o}(this.modelMatrix,this.modelMatrix,this.rotation.z),function(t,e,r){var o=Math.sin(r),i=Math.cos(r),n=e[0],a=e[1],s=e[2],l=e[3],c=e[8],h=e[9],p=e[10],u=e[11];e!==t&&(t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=n*i-c*o,t[1]=a*i-h*o,t[2]=s*i-p*o,t[3]=l*i-u*o,t[8]=n*o+c*i,t[9]=a*o+h*i,t[10]=s*o+p*i,t[11]=l*o+u*i}(this.modelMatrix,this.modelMatrix,this.rotation.y),function(t,e,r){var o=Math.sin(r),i=Math.cos(r),n=e[4],a=e[5],s=e[6],l=e[7],c=e[8],h=e[9],p=e[10],u=e[11];e!==t&&(t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[4]=n*i+c*o,t[5]=a*i+h*o,t[6]=s*i+p*o,t[7]=l*i+u*o,t[8]=c*i-n*o,t[9]=h*i-a*o,t[10]=p*i-s*o,t[11]=u*i-l*o}(this.modelMatrix,this.modelMatrix,this.rotation.x),function(t,e,r){var o=r[0],i=r[1],n=r[2];t[0]=e[0]*o,t[1]=e[1]*o,t[2]=e[2]*o,t[3]=e[3]*o,t[4]=e[4]*i,t[5]=e[5]*i,t[6]=e[6]*i,t[7]=e[7]*i,t[8]=e[8]*n,t[9]=e[9]*n,t[10]=e[10]*n,t[11]=e[11]*n,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]}(this.modelMatrix,this.modelMatrix,[this.scale.x,this.scale.y,this.scale.z]),n.gl.uniformMatrix4fv(n.webGLApp.shader.propertyLocationModelMatrix,!1,this.modelMatrix)},t.prototype.multiplyMat4=function(t,e){var r=t[0],o=t[1],i=t[2],n=t[3],a=t[4],s=t[5],l=t[6],c=t[7],h=t[8],p=t[9],u=t[10],g=t[11],f=t[12],d=t[13],x=t[14],y=t[15],m=e[0],M=e[1],v=e[2],T=e[3],A=e[4],P=e[5],L=e[6],E=e[7],R=e[8],S=e[9],w=e[10],b=e[11],_=e[12],C=e[13],z=e[14],B=e[15];return new Float32Array([r*m+a*M+h*v+f*T,o*m+s*M+p*v+d*T,i*m+l*M+u*v+x*T,n*m+c*M+g*v+y*T,r*A+a*P+h*L+f*E,o*A+s*P+p*L+d*E,i*A+l*P+u*L+x*E,n*A+c*P+g*L+y*E,r*R+a*S+h*w+f*b,o*R+s*S+p*w+d*b,i*R+l*S+u*w+x*b,n*R+c*S+g*w+y*b,r*_+a*C+h*z+f*B,o*_+s*C+p*z+d*B,i*_+l*C+u*z+x*B,n*_+c*C+g*z+y*B])},t.prototype.getMatrixTranslation=function(t,e,r){return[1,0,0,0,0,1,0,0,0,0,1,0,t,e,r,1]},t.prototype.getMatrixRotationX=function(t){var e=Math.cos(2*Math.PI*(t/360)),r=Math.sin(2*Math.PI*(t/360));return[1,0,0,0,0,e,r,0,0,-r,e,0,0,0,0,1]},t.prototype.getMatrixRotationY=function(t){var e=Math.cos(2*Math.PI*(t/360)),r=Math.sin(2*Math.PI*(t/360));return[e,0,r,0,0,1,0,0,-r,0,e,0,0,0,0,1]},t.prototype.getMatrixRotationZ=function(t){var e=Math.cos(2*Math.PI*(t/360)),r=Math.sin(2*Math.PI*(t/360));return[e,r,0,0,-r,e,0,0,0,0,1,0,0,0,0,1]},t.prototype.getMatrixScaleNonUniform=function(t,e,r){return[t,0,0,0,0,e,0,0,0,0,r,0,0,0,0,1]},t.prototype.getMatrixScaleUniform=function(t){return[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1/t]},t}(),h=(a=function(t,e){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}a(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),p=function(t){function e(e,r,o){void 0===e&&(e={x:0,y:0,z:0}),void 0===r&&(r={x:0,y:0,z:0}),void 0===o&&(o={x:1,y:1,z:1});var i=t.call(this,e,r,o)||this;return i.angle=360*Math.random()-180,i.angleSpeed=2.5*Math.random()+.5,i.offset=0,i.offsetSpeed=.095*Math.random()+.005,i.initialPosition=e,i}return h(e,t),e.prototype.update=function(){this.transform(),this.applyTransforms(),this.draw()},e.prototype.draw=function(){n.gl.bindBuffer(n.gl.ARRAY_BUFFER,n.webGLApp.mesh.vertexDataBuffer),n.gl.drawArrays(n.gl.TRIANGLES,0,18)},e.prototype.transform=function(){this.offset+=this.offsetSpeed,this.position={x:this.initialPosition.x+Math.sin(this.offset),y:this.initialPosition.y+Math.cos(this.offset),z:-3},this.angle+=2*Math.PI*(.5/360)*this.angleSpeed,this.rotation={x:this.angle,y:2*this.angle,z:0},this.scale={x:Math.sin(this.angle),y:Math.cos(this.angle),z:1}},e}(c),u=function(){function t(){this.propertyLocationTextures=[],this.program=this.getNewShaderProgram(),this.getPropertyLocations()}return t.prototype.getNewShaderProgram=function(){var t=this.getAndCompileShader("#version 300 es\n    precision mediump float;\n    \n    in vec4 position;\n    in vec4 color;\n    in float pointSize;\n    in vec2 texCoord;\n\n    uniform mat4 projectionMatrix;\n    uniform mat4 modelMatrix;\n\n    out vec4 linkedColor;\n    out vec2 linkedTexCoord;\n\n    void main() {\n        gl_Position = projectionMatrix * modelMatrix * position;\n        gl_PointSize = pointSize;\n        linkedColor = color;\n        linkedTexCoord = texCoord;\n    }",n.gl.VERTEX_SHADER),e=this.getAndCompileShader("#version 300 es\n    precision mediump float;\n\n    in vec4 linkedColor;\n    in vec2 linkedTexCoord;\n\n    uniform sampler2D texture0;\n    uniform sampler2D texture1;\n\n    out vec4 color;\n\n    void main() {\n        color = mix(texture(texture0, linkedTexCoord), texture(texture1, linkedTexCoord), 0.5) * linkedColor;\n    }",n.gl.FRAGMENT_SHADER),r=n.gl.createProgram();return n.gl.attachShader(r,t),n.gl.attachShader(r,e),n.gl.linkProgram(r),n.gl.useProgram(r),r},t.prototype.getAndCompileShader=function(t,e){var r=n.gl.createShader(e);return n.gl.shaderSource(r,t),n.gl.compileShader(r),n.gl.getShaderParameter(r,n.gl.COMPILE_STATUS)?r:(alert(n.gl.getShaderInfoLog(r)),null)},t.prototype.getPropertyLocations=function(){this.propertyLocationPosition=n.gl.getAttribLocation(this.program,"position"),this.propertyLocationPointSize=n.gl.getAttribLocation(this.program,"pointSize"),this.propertyLocationColor=n.gl.getAttribLocation(this.program,"color"),this.propertyLocationTexCoord=n.gl.getAttribLocation(this.program,"texCoord"),this.propertyLocationModelMatrix=n.gl.getUniformLocation(this.program,"modelMatrix"),this.propertyLocationProjectionMatrix=n.gl.getUniformLocation(this.program,"projectionMatrix"),this.propertyLocationTextures=[n.gl.getUniformLocation(this.program,"texture0"),n.gl.getUniformLocation(this.program,"texture1")],n.gl.enableVertexAttribArray(this.propertyLocationPosition),n.gl.enableVertexAttribArray(this.propertyLocationColor),n.gl.enableVertexAttribArray(this.propertyLocationTexCoord)},t}(),g=function(){function t(){this.textureBuffers=[],this.readyCount=0,this.textureBuffers=[this.createTexture("../images/Beagle.jpg"),this.createTexture("../images/Clouds.png")]}return t.prototype.createTexture=function(t){var e=this,r=n.gl.createTexture(),o=new Image;return o.src=t,o.onload=function(){n.gl.bindTexture(n.gl.TEXTURE_2D,r),n.gl.pixelStorei(n.gl.UNPACK_FLIP_Y_WEBGL,!0),n.gl.texImage2D(n.gl.TEXTURE_2D,0,n.gl.RGB,n.gl.RGB,n.gl.UNSIGNED_BYTE,o),n.gl.texParameteri(n.gl.TEXTURE_2D,n.gl.TEXTURE_MAG_FILTER,n.gl.NEAREST),n.gl.texParameteri(n.gl.TEXTURE_2D,n.gl.TEXTURE_MIN_FILTER,n.gl.NEAREST),e.setIsReady()},r},t.prototype.isReady=function(){return this.textureBuffers.length==this.readyCount},t.prototype.setIsReady=function(){this.textureBuffers.length==++this.readyCount&&this.setShaderProperties()},t.prototype.setShaderProperties=function(){var t=n.webGLApp.shader;n.gl.useProgram(t.program),this.textureBuffers;for(var e=0;e<this.textureBuffers.length;e++)n.gl.activeTexture(n.gl.TEXTURE0+e),n.gl.bindTexture(n.gl.TEXTURE_2D,this.textureBuffers[e]),n.gl.uniform1i(t.propertyLocationTextures[e],e)},t}(),f=function(){function t(){}return t.prototype.initialize=function(){var t=this;this.setWebGL2Preferences(),this.shader=new u,this.mesh=new l,this.camera=new s,this.sceneObjects=[new p({x:0,y:0,z:1},{x:45,y:45,z:0},{x:.5,y:.5,z:.5}),new p({x:.75,y:0,z:1},{x:0,y:0,z:90}),new p({x:-.75,y:0,z:1})],this.textureManager=new g,requestAnimationFrame((function(){t.update()}))},t.prototype.setWebGL2Preferences=function(){n.gl.viewport(0,0,n.canvas.clientWidth,n.canvas.clientHeight),n.gl.clearColor(0,0,0,1),n.gl.enable(n.gl.DEPTH_TEST)},t.prototype.update=function(){var t=this;this.textureManager.isReady()?(this.draw(),this.sceneObjects.forEach((function(t){t.update()})),this.camera.update(),requestAnimationFrame((function(){t.update()}))):requestAnimationFrame((function(){t.update()}))},t.prototype.draw=function(){n.gl.clear(n.gl.COLOR_BUFFER_BIT|n.gl.DEPTH_BUFFER_BIT)},t}();(document.getElementById("canvas").getContext("webgl2"),new f).initialize()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,